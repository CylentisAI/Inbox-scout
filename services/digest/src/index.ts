import cron from 'node-cron';
import express from 'express';

interface DraftSummary {
  id: string;
  title: string;
  contactName: string;
  subject: string;
  proposedReply: string;
  priority: string;
  emailType: string;
  notionUrl: string;
  outlookWebLink: string;
  voiceScore: number;
}

class DigestService {
  private app: express.Application;

  constructor() {
    this.app = express();
    this.setupExpress();
    this.setupCronJob();
  }

  private setupExpress() {
    this.app.use(express.json());

    // Health check
    this.app.get('/health', (req, res) => {
      res.json({ 
        status: 'healthy', 
        service: 'digest',
        timestamp: new Date().toISOString()
      });
    });

    // Manual digest trigger
    this.app.post('/send-digest', async (req, res) => {
      try {
        await this.sendDailyDigest();
        res.json({ success: true, message: 'Digest sent successfully' });
      } catch (error) {
        console.error('Error sending digest:', error);
        res.status(500).json({ error: 'Failed to send digest' });
      }
    });
  }

  private setupCronJob() {
    // Run at 7:30 AM Sydney time daily
    const cronSchedule = process.env.DIGEST_SCHEDULE || '30 7 * * *';
    
    cron.schedule(cronSchedule, async () => {
      console.log('Running daily digest job...');
      try {
        await this.sendDailyDigest();
      } catch (error) {
        console.error('Error in daily digest job:', error);
      }
    }, {
      timezone: process.env.DIGEST_TIMEZONE || 'Australia/Sydney'
    });

    console.log(`Digest service scheduled for ${cronSchedule} (${process.env.DIGEST_TIMEZONE || 'Australia/Sydney'})`);
  }

  private async sendDailyDigest(): Promise<void> {
    try {
      console.log('Generating daily digest...');

      // TODO: Integrate with MCP clients
      // 1. Get yesterday's drafts from Notion
      // const drafts = await notionClient.getYesterdayDrafts();
      
      // 2. Format digest content
      // const digestContent = this.formatDigestContent(drafts);
      
      // 3. Send via Outlook
      // await outlookClient.sendDigest(
      //   process.env.DIGEST_RECIPIENT!,
      //   `Daily Email Digest - ${new Date().toLocaleDateString()}`,
      //   digestContent
      // );

      // For now, log what would be sent
      console.log('Daily digest would be sent to:', process.env.DIGEST_RECIPIENT);
      console.log('Subject: Daily Email Digest -', new Date().toLocaleDateString());
      
    } catch (error) {
      console.error('Error sending daily digest:', error);
      throw error;
    }
  }

  private formatDigestContent(drafts: DraftSummary[]): string {
    if (drafts.length === 0) {
      return `
        <html>
          <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <h2>üìß Daily Email Digest</h2>
            <p>Good morning Amy!</p>
            <p>You have no new email drafts to review today. Enjoy your day! ‚òÄÔ∏è</p>
          </body>
        </html>
      `;
    }

    const urgentDrafts = drafts.filter(d => d.priority === 'Urgent');
    const highDrafts = drafts.filter(d => d.priority === 'High');
    const mediumDrafts = drafts.filter(d => d.priority === 'Medium');
    const lowDrafts = drafts.filter(d => d.priority === 'Low');

    let html = `
      <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto;">
          <h2>üìß Daily Email Digest</h2>
          <p>Good morning Amy! You have <strong>${drafts.length}</strong> email drafts ready for review.</p>
    `;

    if (urgentDrafts.length > 0) {
      html += this.formatDraftSection('üö® Urgent', urgentDrafts, '#ff4444');
    }

    if (highDrafts.length > 0) {
      html += this.formatDraftSection('üî¥ High Priority', highDrafts, '#ff8800');
    }

    if (mediumDrafts.length > 0) {
      html += this.formatDraftSection('üü° Medium Priority', mediumDrafts, '#ffaa00');
    }

    if (lowDrafts.length > 0) {
      html += this.formatDraftSection('üü¢ Low Priority', lowDrafts, '#44aa44');
    }

    html += `
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
          <p style="font-size: 12px; color: #666;">
            This digest was automatically generated by your Inbox Scout AI assistant.
            Click the "Open in Outlook" links to review and send your draft replies.
          </p>
        </body>
      </html>
    `;

    return html;
  }

  private formatDraftSection(title: string, drafts: DraftSummary[], color: string): string {
    let html = `
      <div style="margin: 20px 0;">
        <h3 style="color: ${color}; margin-bottom: 15px;">${title} (${drafts.length})</h3>
    `;

    drafts.forEach((draft, index) => {
      const replyPreview = draft.proposedReply.length > 150 
        ? draft.proposedReply.substring(0, 150) + '...'
        : draft.proposedReply;

      html += `
        <div style="border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-bottom: 15px; background: #f9f9f9;">
          <h4 style="margin: 0 0 10px 0; color: #333;">
            ${draft.title}
          </h4>
          <p style="margin: 5px 0; color: #666;">
            <strong>From:</strong> ${draft.contactName}<br>
            <strong>Subject:</strong> ${draft.subject}<br>
            <strong>Type:</strong> ${draft.emailType} | <strong>Voice Score:</strong> ${Math.round(draft.voiceScore * 100)}%
          </p>
          <div style="background: white; padding: 10px; border-radius: 4px; margin: 10px 0; border-left: 4px solid ${color};">
            <p style="margin: 0; font-style: italic;">Proposed Reply:</p>
            <p style="margin: 5px 0;">${replyPreview}</p>
          </div>
          <div style="margin-top: 15px;">
            <a href="${draft.notionUrl}" style="background: #0078d4; color: white; padding: 8px 15px; text-decoration: none; border-radius: 4px; margin-right: 10px; font-size: 14px;">
              üìù Open in Notion
            </a>
            <a href="${draft.outlookWebLink}" style="background: #0078d4; color: white; padding: 8px 15px; text-decoration: none; border-radius: 4px; font-size: 14px;">
              üìß Open in Outlook
            </a>
          </div>
        </div>
      `;
    });

    html += `</div>`;
    return html;
  }

  async start(port: number = 3001): Promise<void> {
    return new Promise((resolve) => {
      this.app.listen(port, () => {
        console.log(`Digest service running on port ${port}`);
        resolve();
      });
    });
  }
}

// Start the digest service
const digestService = new DigestService();
const port = parseInt(process.env.DIGEST_SERVICE_PORT || '3001');

digestService.start(port).catch(console.error);
